swagger: '2.0'
info:
  description: >-
    Hafven Community API [Development]. This might link to the homepage
    [http://hafven-community.ngrok.io](http://hafven-community.ngrok.io). Notice
    that all html tags are valid in this description. Feel free to be
    descriptive.
  version: 0.0.1
  title: Havfen Community-API
  termsOfService: 'https://hafven-community.ngrok.io/impressum'
  contact:
    email: apiteam@hafven-community.ngrok.io
  license:
    name: NA
    url: 'http://hafven-community.ngrok.io/api-lizenz'
host: api.hafven-community.ngrok.io
basePath: /v2
tags:
  - name: community
    description: Everything about the Hafven Community
    externalDocs:
      description: Find out more
      url: 'http://hafven-community.ngrok.io/community'
  - name: groups
    description: Everything about Hafven Community Groups
    externalDocs:
      description: Find out more
      url: 'http://hafven-community.ngrok.io/community/groups'
  - name: meetups
    description: Everything about Hafven Community Group Meetups
    externalDocs:
      description: Find out more
      url: 'http://hafven-community.ngrok.io/community/meetups'
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our users
      url: 'http://hafven-community.ngrok.io/mitglieder'
schemes:
  - http
externalDocs:
  description: Find out more about Swagger
  url: 'https://developer.hafven-community.ngrok.io/'
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /groups:
    post:
      tags:
        - community
        - groups
      summary: Add a new community group
      description: ''
      operationId: addGroup
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Group object that needs to be added to the community
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        '405':
          description: Invalid input
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
    put:
      tags:
        - groups
      summary: Update a community group
      description: ''
      operationId: updateGroup
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Group object that needs to be added to the community
          required: true
          schema:
            $ref: '#/definitions/Group'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
        '405':
          description: Validation exception
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
  /group/findByStatus:
    get:
      tags:
        - groups
      summary: Finds Groups by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findGroupsByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - inactive
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        '400':
          description: Invalid status value
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
  /group/findByTags:
    get:
      tags:
        - groups
      summary: Finds Groups by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findGroupsByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        '400':
          description: Invalid tag value
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
      deprecated: false
  '/group/{groupId}':
    get:
      tags:
        - groups
      summary: Find group by ID
      description: Returns a single group
      operationId: getGroupById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: groupId
          in: path
          description: ID of group to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Group'
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
      security:
        - api_key: []
    post:
      tags:
        - groups
      summary: Updates a group in the community with form data
      description: ''
      operationId: updateGroupWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: groupId
          in: path
          description: ID of group that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the group
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the group
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
    delete:
      tags:
        - groups
      summary: Deletes a group
      description: ''
      operationId: deleteGroup
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: groupId
          in: path
          description: Group id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Group not found
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
  '/group/{groupId}/uploadImage':
    post:
      tags:
        - groups
      summary: uploads an image
      description: ''
      operationId: uploadFile
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: groupId
          in: path
          description: ID of group to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          description: Additional data to pass to server
          required: false
          type: string
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
        - hafven_auth:
            - 'write:groups'
            - 'read:groups'
  /community/inventory:
    get:
      tags:
        - community
      summary: Returns group inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /community/meetup:
    post:
      tags:
        - community
        - meetups
      summary: Place an meetup for a group
      description: ''
      operationId: placeMeetup
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: meetup placed for purchasing the group
          required: true
          schema:
            $ref: '#/definitions/Meetup'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Meetup'
        '400':
          description: Invalid Meetup
  '/community/meetup/{meetupId}':
    get:
      tags:
        - community
        - meetups
      summary: Find meetup by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: getMeetupById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: meetupId
          in: path
          description: ID of meetup that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Meetup'
        '400':
          description: Invalid ID supplied
        '404':
          description: Meetup not found
    delete:
      tags:
        - community
        - meetups
      summary: Delete meetup by ID
      description: >-
        For valid response try integer IDs with positive integer value. Negative
        or non-integer values will generate API errors
      operationId: deleteMeetup
      produces:
        - application/xml
        - application/json
      parameters:
        - name: meetupId
          in: path
          description: ID of the meetup that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Meetup not found
securityDefinitions:
  hafven_auth:
    type: oauth2
    authorizationUrl: 'http://havfen.de/oauth/dialog'
    flow: implicit
    scopes:
      'write:groups': modify groups in your account
      'read:groups': read your groups
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Meetup:
    type: object
    properties:
      id:
        type: integer
        format: int64
      groupId:
        type: integer
        format: int64
      suggestedDate:
        type: string
        format: date-time
      eventDate:
        type: string
        format: date-time
      status:
        type: string
        description: Meetup Status
        enum:
          - placed
          - approved
          - cancelled
      complete:
        type: boolean
        default: false
    xml:
      name: Meetup
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Group:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: group status in the community
        enum:
          - suggested
          - pending
          - approved
          - closed
    xml:
      name: Group
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
